"""
Django settings for personal_website project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import sys
import dj_database_url
from dotenv import dotenv_values, load_dotenv

# Load dotenv in case environment variables are stored there
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# Load environment variables from .env files or use system environment variables
if os.path.exists(os.path.join(BASE_DIR, '.env.local')):
    env_vars = dotenv_values(os.path.join(BASE_DIR, '.env.local'))
elif os.path.exists(os.path.join(BASE_DIR, '.env')):
    env_vars = dotenv_values(os.path.join(BASE_DIR, '.env'))
else:
    # If no .env file is found, use os.environ as fallback
    env_vars = os.environ

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env_vars.get('DJANGO_SECRET_KEY', 'django-insecure-1234567890')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_vars.get('DEBUG', 'False') == 'True'

# Allowed hosts - add domains for your deployment platforms
ALLOWED_HOSTS = env_vars.get('ALLOWED_HOSTS', 'localhost,127.0.0.1,www.shun.uno,shun.uno,*.pythonanywhere.com,*.render.com,*.onrender.com,personal-website-io48.onrender.com').split(',')

# Security settings for production
if not DEBUG:
    # HTTPS settings
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = env_vars.get('SECURE_SSL_REDIRECT', 'True') == 'True'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'Main',
    'Articles',
    'Projects',
    'Research',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    'cloudinary',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'personal_website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'personal_website/Main/templates'),
            os.path.join(BASE_DIR, 'personal_website/Articles/templates'),
            os.path.join(BASE_DIR, 'personal_website/Projects/templates'),
            os.path.join(BASE_DIR, 'personal_website/Research/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'personal_website.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database configuration - works with SQLite or PostgreSQL
USE_SQLITE = env_vars.get('USE_SQLITE', 'False').lower() == 'true'

if USE_SQLITE:
    # For SQLite (local development or Render with volume)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    # For PostgreSQL or other database systems via DATABASE_URL
    db_config = dj_database_url.config(
        default=env_vars.get('DATABASE_URL'),
        conn_max_age=600
    )
    
    # Add special configuration for Neon PostgreSQL
    if 'neon' in env_vars.get('DATABASE_URL', ''):
        # Add Neon-specific options
        db_config['OPTIONS'] = {
            'sslmode': 'require',
        }
        
    DATABASES = {'default': db_config}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = []


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images) configuration
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'Main/static'),
    os.path.join(BASE_DIR, 'static'),
]

if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/login/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'ERROR',
    },
}

# Media and file storage configuration
MEDIA_URL = env_vars.get('MEDIA_URL', '/media/')
MEDIA_ROOT = os.path.join(BASE_DIR, env_vars.get('MEDIA_ROOT', 'media'))

# Use Cloudinary only if configured
USE_CLOUDINARY = env_vars.get('USE_CLOUDINARY', 'True').lower() == 'true'

if USE_CLOUDINARY:
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
    CLOUDINARY_STORAGE = {
        'CLOUD_NAME': env_vars.get('CLOUDINARY_CLOUD_NAME'),
        'API_KEY': env_vars.get('CLOUDINARY_API_KEY'),
        'API_SECRET': env_vars.get('CLOUDINARY_API_SECRET'),
    }
else:
    # Configure local media storage
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    # Make sure media files are served in production
    if not DEBUG:
        MEDIA_ROOT = '/opt/render/project/src/media'

# Contact email
CONTACT_EMAIL = env_vars.get('CONTACT_EMAIL', 'shawnmichael.sudaria04@gmail.com')